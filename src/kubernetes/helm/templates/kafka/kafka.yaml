{{- if .Values.kafka.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: {{ .Values.global.namespace }}
  labels:
    app: zookeeper
spec:
  ports:
    - port: 2181
      name: client
    - port: 2888
      name: server
    - port: 3888
      name: leader-election
  selector:
    app: zookeeper
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: {{ .Values.global.namespace }}
spec:
  serviceName: zookeeper
  replicas: {{ .Values.zookeeper.replicas }}
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: "{{ .Values.zookeeper.image.repository }}:{{ .Values.zookeeper.image.tag }}"
          imagePullPolicy: {{ .Values.zookeeper.image.pullPolicy }}
          ports:
            - containerPort: 2181
              name: client
            - containerPort: 2888
              name: server
            - containerPort: 3888
              name: leader-election
          resources:
            {{- toYaml .Values.zookeeper.resources | nindent 18 }}
          env:
            - name: ZOOKEEPER_CLIENT_PORT
              value: "2181"
            - name: ZOOKEEPER_TICK_TIME
              value: "2000"
          volumeMounts:
            - name: zookeeper-data
              mountPath: /var/lib/zookeeper/data
      {{- if not .Values.zookeeper.persistence.enabled }}
      volumes:
        - name: zookeeper-data
          emptyDir: {}
      {{- end }}
  {{- if .Values.zookeeper.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: zookeeper-data
      spec:
        accessModes: [ "{{ .Values.zookeeper.persistence.accessMode }}" ]
        resources:
          requests:
            storage: "{{ .Values.zookeeper.persistence.size }}"
  {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: {{ .Values.global.namespace }}
  labels:
    app: kafka
spec:
  ports:
    - port: 9092
      name: kafka
  selector:
    app: kafka
---
# StatefulSet для Kafka
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: {{ .Values.global.namespace }}
spec:
  serviceName: kafka
  replicas: {{ .Values.kafka.replicas }}
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: "{{ .Values.kafka.image.repository }}:{{ .Values.kafka.image.tag }}"
          imagePullPolicy: {{ .Values.kafka.image.pullPolicy }}
          ports:
            - containerPort: 9092
              name: kafka
          resources:
            {{- toYaml .Values.kafka.resources | nindent 18 }}
          env:
            - name: KAFKA_ADVERTISED_LISTENERS
              value: PLAINTEXT://kafka:9092
            - name: KAFKA_LISTENERS
              value: PLAINTEXT://0.0.0.0:9092
            - name: KAFKA_PORT
              value: "9092"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: zookeeper:2181
            - name: KAFKA_CREATE_TOPICS
              value: "{{ range $i, $topic := .Values.kafka.topics }}{{ if $i }},{{ end }}{{ $topic.name }}:{{ $topic.partitions }}:{{ $topic.replicationFactor }}{{ end }}"
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_LOG_DIRS
              value: "/kafka/kafka-logs"
          volumeMounts:
            - name: kafka-data
              mountPath: /kafka
      {{- if not .Values.kafka.persistence.enabled }}
      volumes:
        - name: kafka-data
          emptyDir: {}
      {{- end }}
  {{- if .Values.kafka.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: kafka-data
      spec:
        accessModes: [ "{{ .Values.kafka.persistence.accessMode }}" ]
        resources:
          requests:
            storage: "{{ .Values.kafka.persistence.size }}"
  {{- end }}
{{- end }}
